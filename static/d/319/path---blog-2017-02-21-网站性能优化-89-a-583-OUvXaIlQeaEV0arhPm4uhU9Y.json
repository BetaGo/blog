{"data":{"markdownRemark":{"id":"9fd29a9e-7e0c-5af0-aedf-d0ed48336155","html":"<h1 id=\"网站性能优化\"><a href=\"#%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>网站性能优化.</h1>\n<p>一个体验良好的网站应该能尽可能快地将页面展示给用户，减少用户等待的时间，也就是说要尽量减少浏览器渲染出页面的时间。</p>\n<p>首先简单介绍下浏览器的渲染过程：</p>\n<p>浏览器要在屏幕上渲染内容，首先要构建DOM树和CSSOM树；然后浏览器给每个可见节点找到相应匹配的CSSOM规则，并应用这些规则，将两者合成渲染树；在有了这些信息后，浏览器就可以通过这些信息进行计算，最终得到展现在用户面前的样子。</p>\n<p>可以从三个方面来减少页面渲染时间：</p>\n<h2 id=\"1-减小文件体积。\"><a href=\"#1-%E5%87%8F%E5%B0%8F%E6%96%87%E4%BB%B6%E4%BD%93%E7%A7%AF%E3%80%82\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 减小文件体积。</h2>\n<p>源码:</p>\n<ol>\n<li>上线时，去掉开发时的注释与空格。</li>\n<li>采用grunt、gulp等工具进行文件的压缩。</li>\n</ol>\n<p>服务器端：</p>\n<ol>\n<li>可以选用GZip进行文本(html,css,js文件)的压缩。</li>\n<li>采用http缓存。</li>\n</ol>\n<h2 id=\"2-减少请求数量。\"><a href=\"#2-%E5%87%8F%E5%B0%91%E8%AF%B7%E6%B1%82%E6%95%B0%E9%87%8F%E3%80%82\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 减少请求数量。</h2>\n<p>  合并必要的js和css文件。</p>\n<h2 id=\"3-减少阻塞渲染的时间。\"><a href=\"#3-%E5%87%8F%E5%B0%91%E9%98%BB%E5%A1%9E%E6%B8%B2%E6%9F%93%E7%9A%84%E6%97%B6%E9%97%B4%E3%80%82\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 减少阻塞渲染的时间。</h2>\n<p><strong>减少css对渲染的阻塞:</strong></p>\n<p>由于浏览器需要在构建好CSSOM后才会进行渲染，在CSSOM构建完成前，浏览器会暂停渲染任何已处理的内容。所以要尽量精简css，并尽快传给浏览器。</p>\n<p>对于一些只在特定条件下使用的css，可以采用媒体查询来使得这些资源不阻塞渲染。例如一些用于页面打印的样式可以采用：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;link href=&quot;print.css&quot; rel=&quot;stylesheet&quot; media=&quot;print&quot;&gt;</code></pre></div>\n<p>这样在页面首次加载时，print.css就不会阻塞渲染。</p>\n<p><strong>减少javascript对渲染的阻塞：</strong></p>\n<p>在一般情况下，当浏览器遇到script标签时，会先运行里面的js代码，然后再继续进行下一步渲染工作。</p>\n<p>对于这种情况，可以将不对DOM和CSS进行修改的js文件的script标签里面加入async或defer，来异步加载该js文件。</p>\n<p>例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;script src=&quot;app.js&quot; async&gt;&lt;/script&gt;</code></pre></div>\n<p>(defer和async的区别在于：defer是异步下载文件，在页面解析完成之后执行；async是异步下载，下载完成之后立刻执行)</p>","frontmatter":{"title":"网站性能优化","date":"02月 21日, 2017年"}}},"pageContext":{"slug":"/blog/2017-02-21-网站性能优化/","previous":{"id":"63c4aa71-fbd1-5321-bc3c-b306e30eb9ab","fields":{"slug":"/blog/2016-12-13-重新思考一下学习效率的问题/"},"frontmatter":{"title":"重新思考一下学习效率的问题","tags":["反思","学习"],"date":"2016-12-13T00:00:00.000Z","cover":null}},"next":{"id":"fa134374-ca26-52e1-9805-28bfc756bbec","fields":{"slug":"/blog/2017-03-05-javascript中的constructor/"},"frontmatter":{"title":"javascript 中的 constructor","tags":["web","学习","前端","javascript"],"date":"2017-03-05T00:00:00.000Z","cover":null}}}}